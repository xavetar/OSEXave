/*
 * Copyright 2023 Stanislav Mikhailov (xavetar)
 *
 * Licensed under the Creative Commons Zero v1.0 Universal (CC0) License.
 * You may obtain a copy of the License at
 *
 *     http://creativecommons.org/publicdomain/zero/1.0/
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the CC0 license is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// It is strictly forbidden to use the from_code method, respected Microsoft decided to define
// duplicate codes, but by defining different constant names, therefore, when using these codes,
// it is mandatory to use through from_name, and not from_code. Otherwise, it may cause undefined
// behavior or an unknown exception. Because one code corresponds to several constants.

use super::{RawError};

#[derive(Clone, Debug, Copy, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum BLUETOOTH_ATT {
    E_BLUETOOTH_ATT_INVALID_HANDLE,
    E_BLUETOOTH_ATT_READ_NOT_PERMITTED,
    E_BLUETOOTH_ATT_WRITE_NOT_PERMITTED,
    E_BLUETOOTH_ATT_INVALID_PDU,
    E_BLUETOOTH_ATT_INSUFFICIENT_AUTHENTICATION,
    E_BLUETOOTH_ATT_REQUEST_NOT_SUPPORTED,
    E_BLUETOOTH_ATT_INVALID_OFFSET,
    E_BLUETOOTH_ATT_INSUFFICIENT_AUTHORIZATION,
    E_BLUETOOTH_ATT_PREPARE_QUEUE_FULL,
    E_BLUETOOTH_ATT_ATTRIBUTE_NOT_FOUND,
    E_BLUETOOTH_ATT_ATTRIBUTE_NOT_LONG,
    E_BLUETOOTH_ATT_INSUFFICIENT_ENCRYPTION_KEY_SIZE,
    E_BLUETOOTH_ATT_INVALID_ATTRIBUTE_VALUE_LENGTH,
    E_BLUETOOTH_ATT_UNLIKELY,
    E_BLUETOOTH_ATT_INSUFFICIENT_ENCRYPTION,
    E_BLUETOOTH_ATT_UNSUPPORTED_GROUP_TYPE,
    E_BLUETOOTH_ATT_INSUFFICIENT_RESOURCES,
    E_BLUETOOTH_ATT_UNKNOWN_ERROR,
}

impl BLUETOOTH_ATT {
    pub fn code(&self) -> u32 {
        return match self {
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_INVALID_HANDLE => 0x80650001 as u32,
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_READ_NOT_PERMITTED => 0x80650002 as u32,
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_WRITE_NOT_PERMITTED => 0x80650003 as u32,
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_INVALID_PDU => 0x80650004 as u32,
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_INSUFFICIENT_AUTHENTICATION => 0x80650005 as u32,
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_REQUEST_NOT_SUPPORTED => 0x80650006 as u32,
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_INVALID_OFFSET => 0x80650007 as u32,
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_INSUFFICIENT_AUTHORIZATION => 0x80650008 as u32,
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_PREPARE_QUEUE_FULL => 0x80650009 as u32,
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_ATTRIBUTE_NOT_FOUND => 0x8065000A as u32,
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_ATTRIBUTE_NOT_LONG => 0x8065000B as u32,
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_INSUFFICIENT_ENCRYPTION_KEY_SIZE => 0x8065000C as u32,
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_INVALID_ATTRIBUTE_VALUE_LENGTH => 0x8065000D as u32,
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_UNLIKELY => 0x8065000E as u32,
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_INSUFFICIENT_ENCRYPTION => 0x8065000F as u32,
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_UNSUPPORTED_GROUP_TYPE => 0x80650010 as u32,
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_INSUFFICIENT_RESOURCES => 0x80650011 as u32,
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_UNKNOWN_ERROR => 0x80651000 as u32,
        }
    }

    pub fn error(&self) -> RawError {
        return match self {
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_INVALID_HANDLE => RawError::Kind(BLUETOOTH_ATT::E_BLUETOOTH_ATT_INVALID_HANDLE),
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_READ_NOT_PERMITTED => RawError::Kind(BLUETOOTH_ATT::E_BLUETOOTH_ATT_READ_NOT_PERMITTED),
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_WRITE_NOT_PERMITTED => RawError::Kind(BLUETOOTH_ATT::E_BLUETOOTH_ATT_WRITE_NOT_PERMITTED),
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_INVALID_PDU => RawError::Kind(BLUETOOTH_ATT::E_BLUETOOTH_ATT_INVALID_PDU),
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_INSUFFICIENT_AUTHENTICATION => RawError::Kind(BLUETOOTH_ATT::E_BLUETOOTH_ATT_INSUFFICIENT_AUTHENTICATION),
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_REQUEST_NOT_SUPPORTED => RawError::Kind(BLUETOOTH_ATT::E_BLUETOOTH_ATT_REQUEST_NOT_SUPPORTED),
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_INVALID_OFFSET => RawError::Kind(BLUETOOTH_ATT::E_BLUETOOTH_ATT_INVALID_OFFSET),
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_INSUFFICIENT_AUTHORIZATION => RawError::Kind(BLUETOOTH_ATT::E_BLUETOOTH_ATT_INSUFFICIENT_AUTHORIZATION),
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_PREPARE_QUEUE_FULL => RawError::Kind(BLUETOOTH_ATT::E_BLUETOOTH_ATT_PREPARE_QUEUE_FULL),
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_ATTRIBUTE_NOT_FOUND => RawError::Kind(BLUETOOTH_ATT::E_BLUETOOTH_ATT_ATTRIBUTE_NOT_FOUND),
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_ATTRIBUTE_NOT_LONG => RawError::Kind(BLUETOOTH_ATT::E_BLUETOOTH_ATT_ATTRIBUTE_NOT_LONG),
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_INSUFFICIENT_ENCRYPTION_KEY_SIZE => RawError::Kind(BLUETOOTH_ATT::E_BLUETOOTH_ATT_INSUFFICIENT_ENCRYPTION_KEY_SIZE),
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_INVALID_ATTRIBUTE_VALUE_LENGTH => RawError::Kind(BLUETOOTH_ATT::E_BLUETOOTH_ATT_INVALID_ATTRIBUTE_VALUE_LENGTH),
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_UNLIKELY => RawError::Kind(BLUETOOTH_ATT::E_BLUETOOTH_ATT_UNLIKELY),
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_INSUFFICIENT_ENCRYPTION => RawError::Kind(BLUETOOTH_ATT::E_BLUETOOTH_ATT_INSUFFICIENT_ENCRYPTION),
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_UNSUPPORTED_GROUP_TYPE => RawError::Kind(BLUETOOTH_ATT::E_BLUETOOTH_ATT_UNSUPPORTED_GROUP_TYPE),
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_INSUFFICIENT_RESOURCES => RawError::Kind(BLUETOOTH_ATT::E_BLUETOOTH_ATT_INSUFFICIENT_RESOURCES),
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_UNKNOWN_ERROR => RawError::Kind(BLUETOOTH_ATT::E_BLUETOOTH_ATT_UNKNOWN_ERROR),
        }
    }

    pub fn description(&self) -> &'static str {
        return match self {
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_INVALID_HANDLE => "The attribute handle given was not valid on this server.",
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_READ_NOT_PERMITTED => "The attribute cannot be read.",
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_WRITE_NOT_PERMITTED => "The attribute cannot be written.",
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_INVALID_PDU => "The attribute PDU was invalid.",
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_INSUFFICIENT_AUTHENTICATION => "The attribute requires authentication before it can be read or written.",
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_REQUEST_NOT_SUPPORTED => "Attribute server does not support the request received from the client.",
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_INVALID_OFFSET => "Offset specified was past the end of the attribute.",
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_INSUFFICIENT_AUTHORIZATION => "The attribute requires authorization before it can be read or written.",
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_PREPARE_QUEUE_FULL => "Too many prepare writes have been queued.",
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_ATTRIBUTE_NOT_FOUND => "No attribute found within the given attribute handle range.",
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_ATTRIBUTE_NOT_LONG => "The attribute cannot be read or written using the Read Blob Request.",
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_INSUFFICIENT_ENCRYPTION_KEY_SIZE => "The Encryption Key Size used for encrypting this link is insufficient.",
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_INVALID_ATTRIBUTE_VALUE_LENGTH => "The attribute value length is invalid for the operation.",
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_UNLIKELY => "The attribute request that was requested has encountered an error that was unlikely, and therefore could not be completed as requested.",
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_INSUFFICIENT_ENCRYPTION => "The attribute requires encryption before it can be read or written.",
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_UNSUPPORTED_GROUP_TYPE => "The attribute type is not a supported grouping attribute as defined by a higher layer specification.",
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_INSUFFICIENT_RESOURCES => "Insufficient Resources to complete the request.",
            BLUETOOTH_ATT::E_BLUETOOTH_ATT_UNKNOWN_ERROR => "An error that lies in the reserved range has been received.",
        }
    }

    pub fn from_name(name: &str) -> BLUETOOTH_ATT {
        return match name {
            "E_BLUETOOTH_ATT_INVALID_HANDLE" => BLUETOOTH_ATT::E_BLUETOOTH_ATT_INVALID_HANDLE,
            "E_BLUETOOTH_ATT_READ_NOT_PERMITTED" => BLUETOOTH_ATT::E_BLUETOOTH_ATT_READ_NOT_PERMITTED,
            "E_BLUETOOTH_ATT_WRITE_NOT_PERMITTED" => BLUETOOTH_ATT::E_BLUETOOTH_ATT_WRITE_NOT_PERMITTED,
            "E_BLUETOOTH_ATT_INVALID_PDU" => BLUETOOTH_ATT::E_BLUETOOTH_ATT_INVALID_PDU,
            "E_BLUETOOTH_ATT_INSUFFICIENT_AUTHENTICATION" => BLUETOOTH_ATT::E_BLUETOOTH_ATT_INSUFFICIENT_AUTHENTICATION,
            "E_BLUETOOTH_ATT_REQUEST_NOT_SUPPORTED" => BLUETOOTH_ATT::E_BLUETOOTH_ATT_REQUEST_NOT_SUPPORTED,
            "E_BLUETOOTH_ATT_INVALID_OFFSET" => BLUETOOTH_ATT::E_BLUETOOTH_ATT_INVALID_OFFSET,
            "E_BLUETOOTH_ATT_INSUFFICIENT_AUTHORIZATION" => BLUETOOTH_ATT::E_BLUETOOTH_ATT_INSUFFICIENT_AUTHORIZATION,
            "E_BLUETOOTH_ATT_PREPARE_QUEUE_FULL" => BLUETOOTH_ATT::E_BLUETOOTH_ATT_PREPARE_QUEUE_FULL,
            "E_BLUETOOTH_ATT_ATTRIBUTE_NOT_FOUND" => BLUETOOTH_ATT::E_BLUETOOTH_ATT_ATTRIBUTE_NOT_FOUND,
            "E_BLUETOOTH_ATT_ATTRIBUTE_NOT_LONG" => BLUETOOTH_ATT::E_BLUETOOTH_ATT_ATTRIBUTE_NOT_LONG,
            "E_BLUETOOTH_ATT_INSUFFICIENT_ENCRYPTION_KEY_SIZE" => BLUETOOTH_ATT::E_BLUETOOTH_ATT_INSUFFICIENT_ENCRYPTION_KEY_SIZE,
            "E_BLUETOOTH_ATT_INVALID_ATTRIBUTE_VALUE_LENGTH" => BLUETOOTH_ATT::E_BLUETOOTH_ATT_INVALID_ATTRIBUTE_VALUE_LENGTH,
            "E_BLUETOOTH_ATT_UNLIKELY" => BLUETOOTH_ATT::E_BLUETOOTH_ATT_UNLIKELY,
            "E_BLUETOOTH_ATT_INSUFFICIENT_ENCRYPTION" => BLUETOOTH_ATT::E_BLUETOOTH_ATT_INSUFFICIENT_ENCRYPTION,
            "E_BLUETOOTH_ATT_UNSUPPORTED_GROUP_TYPE" => BLUETOOTH_ATT::E_BLUETOOTH_ATT_UNSUPPORTED_GROUP_TYPE,
            "E_BLUETOOTH_ATT_INSUFFICIENT_RESOURCES" => BLUETOOTH_ATT::E_BLUETOOTH_ATT_INSUFFICIENT_RESOURCES,
            "E_BLUETOOTH_ATT_UNKNOWN_ERROR" => BLUETOOTH_ATT::E_BLUETOOTH_ATT_UNKNOWN_ERROR,
        }
    }
    pub fn from_code(code: u32) -> BLUETOOTH_ATT {
        return match code {
            0x80650001 => BLUETOOTH_ATT::E_BLUETOOTH_ATT_INVALID_HANDLE,
            0x80650002 => BLUETOOTH_ATT::E_BLUETOOTH_ATT_READ_NOT_PERMITTED,
            0x80650003 => BLUETOOTH_ATT::E_BLUETOOTH_ATT_WRITE_NOT_PERMITTED,
            0x80650004 => BLUETOOTH_ATT::E_BLUETOOTH_ATT_INVALID_PDU,
            0x80650005 => BLUETOOTH_ATT::E_BLUETOOTH_ATT_INSUFFICIENT_AUTHENTICATION,
            0x80650006 => BLUETOOTH_ATT::E_BLUETOOTH_ATT_REQUEST_NOT_SUPPORTED,
            0x80650007 => BLUETOOTH_ATT::E_BLUETOOTH_ATT_INVALID_OFFSET,
            0x80650008 => BLUETOOTH_ATT::E_BLUETOOTH_ATT_INSUFFICIENT_AUTHORIZATION,
            0x80650009 => BLUETOOTH_ATT::E_BLUETOOTH_ATT_PREPARE_QUEUE_FULL,
            0x8065000A => BLUETOOTH_ATT::E_BLUETOOTH_ATT_ATTRIBUTE_NOT_FOUND,
            0x8065000B => BLUETOOTH_ATT::E_BLUETOOTH_ATT_ATTRIBUTE_NOT_LONG,
            0x8065000C => BLUETOOTH_ATT::E_BLUETOOTH_ATT_INSUFFICIENT_ENCRYPTION_KEY_SIZE,
            0x8065000D => BLUETOOTH_ATT::E_BLUETOOTH_ATT_INVALID_ATTRIBUTE_VALUE_LENGTH,
            0x8065000E => BLUETOOTH_ATT::E_BLUETOOTH_ATT_UNLIKELY,
            0x8065000F => BLUETOOTH_ATT::E_BLUETOOTH_ATT_INSUFFICIENT_ENCRYPTION,
            0x80650010 => BLUETOOTH_ATT::E_BLUETOOTH_ATT_UNSUPPORTED_GROUP_TYPE,
            0x80650011 => BLUETOOTH_ATT::E_BLUETOOTH_ATT_INSUFFICIENT_RESOURCES,
            0x80651000 => BLUETOOTH_ATT::E_BLUETOOTH_ATT_UNKNOWN_ERROR,
        }
    }
}
