/*
 * Copyright 2023 Stanislav Mikhailov (xavetar)
 *
 * Licensed under the Creative Commons Zero v1.0 Universal (CC0) License.
 * You may obtain a copy of the License at
 *
 *     http://creativecommons.org/publicdomain/zero/1.0/
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the CC0 license is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// It is strictly forbidden to use the from_code method, respected Microsoft decided to define
// duplicate codes, but by defining different constant names, therefore, when using these codes,
// it is mandatory to use through from_name, and not from_code. Otherwise, it may cause undefined
// behavior or an unknown exception. Because one code corresponds to several constants.

use super::{RawError};

#[derive(Clone, Debug, Copy, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum SHARED_VHDX {
    ERROR_SSVHDX_ERROR_STORED,
    ERROR_SSVHDX_ERROR_NOT_AVAILABLE,
    ERROR_SSVHDX_UNIT_ATTENTION_AVAILABLE,
    ERROR_SSVHDX_UNIT_ATTENTION_CAPACITY_DATA_CHANGED,
    ERROR_SSVHDX_UNIT_ATTENTION_RESERVATIONS_PREEMPTED,
    ERROR_SSVHDX_UNIT_ATTENTION_RESERVATIONS_RELEASED,
    ERROR_SSVHDX_UNIT_ATTENTION_REGISTRATIONS_PREEMPTED,
    ERROR_SSVHDX_UNIT_ATTENTION_OPERATING_DEFINITION_CHANGED,
    ERROR_SSVHDX_RESERVATION_CONFLICT,
    ERROR_SSVHDX_WRONG_FILE_TYPE,
    ERROR_SSVHDX_VERSION_MISMATCH,
    ERROR_VHD_SHARED,
    ERROR_SSVHDX_NO_INITIATOR,
    ERROR_VHDSET_BACKING_STORAGE_NOT_FOUND,
}

impl SHARED_VHDX {
    pub fn code(&self) -> u32 {
        return match self {
            SHARED_VHDX::ERROR_SSVHDX_ERROR_STORED => 0xC05C0000 as u32,
            SHARED_VHDX::ERROR_SSVHDX_ERROR_NOT_AVAILABLE => 0xC05CFF00 as u32,
            SHARED_VHDX::ERROR_SSVHDX_UNIT_ATTENTION_AVAILABLE => 0xC05CFF01 as u32,
            SHARED_VHDX::ERROR_SSVHDX_UNIT_ATTENTION_CAPACITY_DATA_CHANGED => 0xC05CFF02 as u32,
            SHARED_VHDX::ERROR_SSVHDX_UNIT_ATTENTION_RESERVATIONS_PREEMPTED => 0xC05CFF03 as u32,
            SHARED_VHDX::ERROR_SSVHDX_UNIT_ATTENTION_RESERVATIONS_RELEASED => 0xC05CFF04 as u32,
            SHARED_VHDX::ERROR_SSVHDX_UNIT_ATTENTION_REGISTRATIONS_PREEMPTED => 0xC05CFF05 as u32,
            SHARED_VHDX::ERROR_SSVHDX_UNIT_ATTENTION_OPERATING_DEFINITION_CHANGED => 0xC05CFF06 as u32,
            SHARED_VHDX::ERROR_SSVHDX_RESERVATION_CONFLICT => 0xC05CFF07 as u32,
            SHARED_VHDX::ERROR_SSVHDX_WRONG_FILE_TYPE => 0xC05CFF08 as u32,
            SHARED_VHDX::ERROR_SSVHDX_VERSION_MISMATCH => 0xC05CFF09 as u32,
            SHARED_VHDX::ERROR_VHD_SHARED => 0xC05CFF0A as u32,
            SHARED_VHDX::ERROR_SSVHDX_NO_INITIATOR => 0xC05CFF0B as u32,
            SHARED_VHDX::ERROR_VHDSET_BACKING_STORAGE_NOT_FOUND => 0xC05CFF0C as u32,
        }
    }

    pub fn error(&self) -> RawError {
        return match self {
            SHARED_VHDX::ERROR_SSVHDX_ERROR_STORED => RawError::Kind(SHARED_VHDX::ERROR_SSVHDX_ERROR_STORED),
            SHARED_VHDX::ERROR_SSVHDX_ERROR_NOT_AVAILABLE => RawError::Kind(SHARED_VHDX::ERROR_SSVHDX_ERROR_NOT_AVAILABLE),
            SHARED_VHDX::ERROR_SSVHDX_UNIT_ATTENTION_AVAILABLE => RawError::Kind(SHARED_VHDX::ERROR_SSVHDX_UNIT_ATTENTION_AVAILABLE),
            SHARED_VHDX::ERROR_SSVHDX_UNIT_ATTENTION_CAPACITY_DATA_CHANGED => RawError::Kind(SHARED_VHDX::ERROR_SSVHDX_UNIT_ATTENTION_CAPACITY_DATA_CHANGED),
            SHARED_VHDX::ERROR_SSVHDX_UNIT_ATTENTION_RESERVATIONS_PREEMPTED => RawError::Kind(SHARED_VHDX::ERROR_SSVHDX_UNIT_ATTENTION_RESERVATIONS_PREEMPTED),
            SHARED_VHDX::ERROR_SSVHDX_UNIT_ATTENTION_RESERVATIONS_RELEASED => RawError::Kind(SHARED_VHDX::ERROR_SSVHDX_UNIT_ATTENTION_RESERVATIONS_RELEASED),
            SHARED_VHDX::ERROR_SSVHDX_UNIT_ATTENTION_REGISTRATIONS_PREEMPTED => RawError::Kind(SHARED_VHDX::ERROR_SSVHDX_UNIT_ATTENTION_REGISTRATIONS_PREEMPTED),
            SHARED_VHDX::ERROR_SSVHDX_UNIT_ATTENTION_OPERATING_DEFINITION_CHANGED => RawError::Kind(SHARED_VHDX::ERROR_SSVHDX_UNIT_ATTENTION_OPERATING_DEFINITION_CHANGED),
            SHARED_VHDX::ERROR_SSVHDX_RESERVATION_CONFLICT => RawError::Kind(SHARED_VHDX::ERROR_SSVHDX_RESERVATION_CONFLICT),
            SHARED_VHDX::ERROR_SSVHDX_WRONG_FILE_TYPE => RawError::Kind(SHARED_VHDX::ERROR_SSVHDX_WRONG_FILE_TYPE),
            SHARED_VHDX::ERROR_SSVHDX_VERSION_MISMATCH => RawError::Kind(SHARED_VHDX::ERROR_SSVHDX_VERSION_MISMATCH),
            SHARED_VHDX::ERROR_VHD_SHARED => RawError::Kind(SHARED_VHDX::ERROR_VHD_SHARED),
            SHARED_VHDX::ERROR_SSVHDX_NO_INITIATOR => RawError::Kind(SHARED_VHDX::ERROR_SSVHDX_NO_INITIATOR),
            SHARED_VHDX::ERROR_VHDSET_BACKING_STORAGE_NOT_FOUND => RawError::Kind(SHARED_VHDX::ERROR_VHDSET_BACKING_STORAGE_NOT_FOUND),
        }
    }

    pub fn description(&self) -> &'static str {
        return match self {
            SHARED_VHDX::ERROR_SSVHDX_ERROR_STORED => "The proper error code with sense data was stored on server side.",
            SHARED_VHDX::ERROR_SSVHDX_ERROR_NOT_AVAILABLE => "The requested error data is not available on the server.",
            SHARED_VHDX::ERROR_SSVHDX_UNIT_ATTENTION_AVAILABLE => "Unit Attention data is available for the initiator to query.",
            SHARED_VHDX::ERROR_SSVHDX_UNIT_ATTENTION_CAPACITY_DATA_CHANGED => "The data capacity of the device has changed, resulting in a Unit Attention condition.",
            SHARED_VHDX::ERROR_SSVHDX_UNIT_ATTENTION_RESERVATIONS_PREEMPTED => "A previous operation resulted in this initiator's reservations being preempted, resulting in a Unit Attention condition.",
            SHARED_VHDX::ERROR_SSVHDX_UNIT_ATTENTION_RESERVATIONS_RELEASED => "A previous operation resulted in this initiator's reservations being released, resulting in a Unit Attention condition.",
            SHARED_VHDX::ERROR_SSVHDX_UNIT_ATTENTION_REGISTRATIONS_PREEMPTED => "A previous operation resulted in this initiator's registrations being preempted, resulting in a Unit Attention condition.",
            SHARED_VHDX::ERROR_SSVHDX_UNIT_ATTENTION_OPERATING_DEFINITION_CHANGED => "The data storage format of the device has changed, resulting in a Unit Attention condition.",
            SHARED_VHDX::ERROR_SSVHDX_RESERVATION_CONFLICT => "The current initiator is not allowed to perform the SCSI command because of a reservation conflict.",
            SHARED_VHDX::ERROR_SSVHDX_WRONG_FILE_TYPE => "Multiple virtual machines sharing a virtual hard disk is supported only on Fixed or Dynamic SVHDX format virtual hard disks.",
            SHARED_VHDX::ERROR_SSVHDX_VERSION_MISMATCH => "The server version does not match the requested version.",
            SHARED_VHDX::ERROR_VHD_SHARED => "The requested operation cannot be performed on the virtual disk as it is currently used in shared mode.",
            SHARED_VHDX::ERROR_SSVHDX_NO_INITIATOR => "Invalid Shared SVHDX open due to lack of initiator ID. Check for related Continuous Availability failures.",
            SHARED_VHDX::ERROR_VHDSET_BACKING_STORAGE_NOT_FOUND => "The requested operation failed due to a missing backing storage file.",
        }
    }

    pub fn from_name(name: &str) -> SHARED_VHDX {
        return match name {
            "ERROR_SSVHDX_ERROR_STORED" => SHARED_VHDX::ERROR_SSVHDX_ERROR_STORED,
            "ERROR_SSVHDX_ERROR_NOT_AVAILABLE" => SHARED_VHDX::ERROR_SSVHDX_ERROR_NOT_AVAILABLE,
            "ERROR_SSVHDX_UNIT_ATTENTION_AVAILABLE" => SHARED_VHDX::ERROR_SSVHDX_UNIT_ATTENTION_AVAILABLE,
            "ERROR_SSVHDX_UNIT_ATTENTION_CAPACITY_DATA_CHANGED" => SHARED_VHDX::ERROR_SSVHDX_UNIT_ATTENTION_CAPACITY_DATA_CHANGED,
            "ERROR_SSVHDX_UNIT_ATTENTION_RESERVATIONS_PREEMPTED" => SHARED_VHDX::ERROR_SSVHDX_UNIT_ATTENTION_RESERVATIONS_PREEMPTED,
            "ERROR_SSVHDX_UNIT_ATTENTION_RESERVATIONS_RELEASED" => SHARED_VHDX::ERROR_SSVHDX_UNIT_ATTENTION_RESERVATIONS_RELEASED,
            "ERROR_SSVHDX_UNIT_ATTENTION_REGISTRATIONS_PREEMPTED" => SHARED_VHDX::ERROR_SSVHDX_UNIT_ATTENTION_REGISTRATIONS_PREEMPTED,
            "ERROR_SSVHDX_UNIT_ATTENTION_OPERATING_DEFINITION_CHANGED" => SHARED_VHDX::ERROR_SSVHDX_UNIT_ATTENTION_OPERATING_DEFINITION_CHANGED,
            "ERROR_SSVHDX_RESERVATION_CONFLICT" => SHARED_VHDX::ERROR_SSVHDX_RESERVATION_CONFLICT,
            "ERROR_SSVHDX_WRONG_FILE_TYPE" => SHARED_VHDX::ERROR_SSVHDX_WRONG_FILE_TYPE,
            "ERROR_SSVHDX_VERSION_MISMATCH" => SHARED_VHDX::ERROR_SSVHDX_VERSION_MISMATCH,
            "ERROR_VHD_SHARED" => SHARED_VHDX::ERROR_VHD_SHARED,
            "ERROR_SSVHDX_NO_INITIATOR" => SHARED_VHDX::ERROR_SSVHDX_NO_INITIATOR,
            "ERROR_VHDSET_BACKING_STORAGE_NOT_FOUND" => SHARED_VHDX::ERROR_VHDSET_BACKING_STORAGE_NOT_FOUND,
        }
    }
    pub fn from_code(code: u32) -> SHARED_VHDX {
        return match code {
            0xC05C0000 => SHARED_VHDX::ERROR_SSVHDX_ERROR_STORED,
            0xC05CFF00 => SHARED_VHDX::ERROR_SSVHDX_ERROR_NOT_AVAILABLE,
            0xC05CFF01 => SHARED_VHDX::ERROR_SSVHDX_UNIT_ATTENTION_AVAILABLE,
            0xC05CFF02 => SHARED_VHDX::ERROR_SSVHDX_UNIT_ATTENTION_CAPACITY_DATA_CHANGED,
            0xC05CFF03 => SHARED_VHDX::ERROR_SSVHDX_UNIT_ATTENTION_RESERVATIONS_PREEMPTED,
            0xC05CFF04 => SHARED_VHDX::ERROR_SSVHDX_UNIT_ATTENTION_RESERVATIONS_RELEASED,
            0xC05CFF05 => SHARED_VHDX::ERROR_SSVHDX_UNIT_ATTENTION_REGISTRATIONS_PREEMPTED,
            0xC05CFF06 => SHARED_VHDX::ERROR_SSVHDX_UNIT_ATTENTION_OPERATING_DEFINITION_CHANGED,
            0xC05CFF07 => SHARED_VHDX::ERROR_SSVHDX_RESERVATION_CONFLICT,
            0xC05CFF08 => SHARED_VHDX::ERROR_SSVHDX_WRONG_FILE_TYPE,
            0xC05CFF09 => SHARED_VHDX::ERROR_SSVHDX_VERSION_MISMATCH,
            0xC05CFF0A => SHARED_VHDX::ERROR_VHD_SHARED,
            0xC05CFF0B => SHARED_VHDX::ERROR_SSVHDX_NO_INITIATOR,
            0xC05CFF0C => SHARED_VHDX::ERROR_VHDSET_BACKING_STORAGE_NOT_FOUND,
        }
    }
}
