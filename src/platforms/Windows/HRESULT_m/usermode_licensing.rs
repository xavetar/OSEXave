/*
 * Copyright 2023 Stanislav Mikhailov (xavetar)
 *
 * Licensed under the Creative Commons Zero v1.0 Universal (CC0) License.
 * You may obtain a copy of the License at
 *
 *     http://creativecommons.org/publicdomain/zero/1.0/
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the CC0 license is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// It is strictly forbidden to use the from_code method, respected Microsoft decided to define
// duplicate codes, but by defining different constant names, therefore, when using these codes,
// it is mandatory to use through from_name, and not from_code. Otherwise, it may cause undefined
// behavior or an unknown exception. Because one code corresponds to several constants.

use super::{RawError};

#[derive(Clone, Debug, Copy, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum USERMODE_LICENSING {
    ERROR_NO_APPLICABLE_APP_LICENSES_FOUND,
    ERROR_CLIP_LICENSE_NOT_FOUND,
    ERROR_CLIP_DEVICE_LICENSE_MISSING,
    ERROR_CLIP_LICENSE_INVALID_SIGNATURE,
    ERROR_CLIP_KEYHOLDER_LICENSE_MISSING_OR_INVALID,
    ERROR_CLIP_LICENSE_EXPIRED,
    ERROR_CLIP_LICENSE_SIGNED_BY_UNKNOWN_SOURCE,
    ERROR_CLIP_LICENSE_NOT_SIGNED,
    ERROR_CLIP_LICENSE_HARDWARE_ID_OUT_OF_TOLERANCE,
    ERROR_CLIP_LICENSE_DEVICE_ID_MISMATCH,
}

impl USERMODE_LICENSING {
    pub fn code(&self) -> u32 {
        return match self {
            USERMODE_LICENSING::ERROR_NO_APPLICABLE_APP_LICENSES_FOUND => 0xC0EA0001 as u32,
            USERMODE_LICENSING::ERROR_CLIP_LICENSE_NOT_FOUND => 0xC0EA0002 as u32,
            USERMODE_LICENSING::ERROR_CLIP_DEVICE_LICENSE_MISSING => 0xC0EA0003 as u32,
            USERMODE_LICENSING::ERROR_CLIP_LICENSE_INVALID_SIGNATURE => 0xC0EA0004 as u32,
            USERMODE_LICENSING::ERROR_CLIP_KEYHOLDER_LICENSE_MISSING_OR_INVALID => 0xC0EA0005 as u32,
            USERMODE_LICENSING::ERROR_CLIP_LICENSE_EXPIRED => 0xC0EA0006 as u32,
            USERMODE_LICENSING::ERROR_CLIP_LICENSE_SIGNED_BY_UNKNOWN_SOURCE => 0xC0EA0007 as u32,
            USERMODE_LICENSING::ERROR_CLIP_LICENSE_NOT_SIGNED => 0xC0EA0008 as u32,
            USERMODE_LICENSING::ERROR_CLIP_LICENSE_HARDWARE_ID_OUT_OF_TOLERANCE => 0xC0EA0009 as u32,
            USERMODE_LICENSING::ERROR_CLIP_LICENSE_DEVICE_ID_MISMATCH => 0xC0EA000A as u32,
        }
    }

    pub fn error(&self) -> RawError {
        return match self {
            USERMODE_LICENSING::ERROR_NO_APPLICABLE_APP_LICENSES_FOUND => RawError::Kind(USERMODE_LICENSING::ERROR_NO_APPLICABLE_APP_LICENSES_FOUND),
            USERMODE_LICENSING::ERROR_CLIP_LICENSE_NOT_FOUND => RawError::Kind(USERMODE_LICENSING::ERROR_CLIP_LICENSE_NOT_FOUND),
            USERMODE_LICENSING::ERROR_CLIP_DEVICE_LICENSE_MISSING => RawError::Kind(USERMODE_LICENSING::ERROR_CLIP_DEVICE_LICENSE_MISSING),
            USERMODE_LICENSING::ERROR_CLIP_LICENSE_INVALID_SIGNATURE => RawError::Kind(USERMODE_LICENSING::ERROR_CLIP_LICENSE_INVALID_SIGNATURE),
            USERMODE_LICENSING::ERROR_CLIP_KEYHOLDER_LICENSE_MISSING_OR_INVALID => RawError::Kind(USERMODE_LICENSING::ERROR_CLIP_KEYHOLDER_LICENSE_MISSING_OR_INVALID),
            USERMODE_LICENSING::ERROR_CLIP_LICENSE_EXPIRED => RawError::Kind(USERMODE_LICENSING::ERROR_CLIP_LICENSE_EXPIRED),
            USERMODE_LICENSING::ERROR_CLIP_LICENSE_SIGNED_BY_UNKNOWN_SOURCE => RawError::Kind(USERMODE_LICENSING::ERROR_CLIP_LICENSE_SIGNED_BY_UNKNOWN_SOURCE),
            USERMODE_LICENSING::ERROR_CLIP_LICENSE_NOT_SIGNED => RawError::Kind(USERMODE_LICENSING::ERROR_CLIP_LICENSE_NOT_SIGNED),
            USERMODE_LICENSING::ERROR_CLIP_LICENSE_HARDWARE_ID_OUT_OF_TOLERANCE => RawError::Kind(USERMODE_LICENSING::ERROR_CLIP_LICENSE_HARDWARE_ID_OUT_OF_TOLERANCE),
            USERMODE_LICENSING::ERROR_CLIP_LICENSE_DEVICE_ID_MISMATCH => RawError::Kind(USERMODE_LICENSING::ERROR_CLIP_LICENSE_DEVICE_ID_MISMATCH),
        }
    }

    pub fn description(&self) -> &'static str {
        return match self {
            USERMODE_LICENSING::ERROR_NO_APPLICABLE_APP_LICENSES_FOUND => "No applicable app licenses found.",
            USERMODE_LICENSING::ERROR_CLIP_LICENSE_NOT_FOUND => "CLiP license not found.",
            USERMODE_LICENSING::ERROR_CLIP_DEVICE_LICENSE_MISSING => "CLiP device license not found.",
            USERMODE_LICENSING::ERROR_CLIP_LICENSE_INVALID_SIGNATURE => "CLiP license has an invalid signature.",
            USERMODE_LICENSING::ERROR_CLIP_KEYHOLDER_LICENSE_MISSING_OR_INVALID => "CLiP keyholder license is invalid or missing.",
            USERMODE_LICENSING::ERROR_CLIP_LICENSE_EXPIRED => "CLiP license has expired.",
            USERMODE_LICENSING::ERROR_CLIP_LICENSE_SIGNED_BY_UNKNOWN_SOURCE => "CLiP license is signed by an unknown source.",
            USERMODE_LICENSING::ERROR_CLIP_LICENSE_NOT_SIGNED => "CLiP license is not signed.",
            USERMODE_LICENSING::ERROR_CLIP_LICENSE_HARDWARE_ID_OUT_OF_TOLERANCE => "CLiP license hardware ID is out of tolerance.",
            USERMODE_LICENSING::ERROR_CLIP_LICENSE_DEVICE_ID_MISMATCH => "CLiP license device ID does not match the device ID in the bound device license.",
        }
    }

    pub fn from_name(name: &str) -> USERMODE_LICENSING {
        return match name {
            "ERROR_NO_APPLICABLE_APP_LICENSES_FOUND" => USERMODE_LICENSING::ERROR_NO_APPLICABLE_APP_LICENSES_FOUND,
            "ERROR_CLIP_LICENSE_NOT_FOUND" => USERMODE_LICENSING::ERROR_CLIP_LICENSE_NOT_FOUND,
            "ERROR_CLIP_DEVICE_LICENSE_MISSING" => USERMODE_LICENSING::ERROR_CLIP_DEVICE_LICENSE_MISSING,
            "ERROR_CLIP_LICENSE_INVALID_SIGNATURE" => USERMODE_LICENSING::ERROR_CLIP_LICENSE_INVALID_SIGNATURE,
            "ERROR_CLIP_KEYHOLDER_LICENSE_MISSING_OR_INVALID" => USERMODE_LICENSING::ERROR_CLIP_KEYHOLDER_LICENSE_MISSING_OR_INVALID,
            "ERROR_CLIP_LICENSE_EXPIRED" => USERMODE_LICENSING::ERROR_CLIP_LICENSE_EXPIRED,
            "ERROR_CLIP_LICENSE_SIGNED_BY_UNKNOWN_SOURCE" => USERMODE_LICENSING::ERROR_CLIP_LICENSE_SIGNED_BY_UNKNOWN_SOURCE,
            "ERROR_CLIP_LICENSE_NOT_SIGNED" => USERMODE_LICENSING::ERROR_CLIP_LICENSE_NOT_SIGNED,
            "ERROR_CLIP_LICENSE_HARDWARE_ID_OUT_OF_TOLERANCE" => USERMODE_LICENSING::ERROR_CLIP_LICENSE_HARDWARE_ID_OUT_OF_TOLERANCE,
            "ERROR_CLIP_LICENSE_DEVICE_ID_MISMATCH" => USERMODE_LICENSING::ERROR_CLIP_LICENSE_DEVICE_ID_MISMATCH,
        }
    }
    pub fn from_code(code: u32) -> USERMODE_LICENSING {
        return match code {
            0xC0EA0001 => USERMODE_LICENSING::ERROR_NO_APPLICABLE_APP_LICENSES_FOUND,
            0xC0EA0002 => USERMODE_LICENSING::ERROR_CLIP_LICENSE_NOT_FOUND,
            0xC0EA0003 => USERMODE_LICENSING::ERROR_CLIP_DEVICE_LICENSE_MISSING,
            0xC0EA0004 => USERMODE_LICENSING::ERROR_CLIP_LICENSE_INVALID_SIGNATURE,
            0xC0EA0005 => USERMODE_LICENSING::ERROR_CLIP_KEYHOLDER_LICENSE_MISSING_OR_INVALID,
            0xC0EA0006 => USERMODE_LICENSING::ERROR_CLIP_LICENSE_EXPIRED,
            0xC0EA0007 => USERMODE_LICENSING::ERROR_CLIP_LICENSE_SIGNED_BY_UNKNOWN_SOURCE,
            0xC0EA0008 => USERMODE_LICENSING::ERROR_CLIP_LICENSE_NOT_SIGNED,
            0xC0EA0009 => USERMODE_LICENSING::ERROR_CLIP_LICENSE_HARDWARE_ID_OUT_OF_TOLERANCE,
            0xC0EA000A => USERMODE_LICENSING::ERROR_CLIP_LICENSE_DEVICE_ID_MISMATCH,
        }
    }
}
